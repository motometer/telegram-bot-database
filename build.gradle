import org.jooq.codegen.GenerationTool

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.jooq:jooq-codegen:3.12.3'
        classpath 'org.postgresql:postgresql:42.2.9'
        classpath "org.liquibase:liquibase-gradle-plugin:2.0.2"
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'signing'
}

apply plugin: 'org.liquibase.gradle'

group = "org.motometer.telegram"
version '0.0.2-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    jdbcUrl = System.getenv('JDBC_URL')
    jdbcUsername = System.getenv('JDBC_USERNAME')
    jdbcPassword = System.getenv('JDBC_PASSWORD')
    schema = System.getenv('JDBC_SCHEMA')
}

ext.signingKeyFile = "$buildDir/keys/key.gpg"
ext.'signing.keyId' = System.getenv('GPG_KEY_ID')
ext.'signing.secretKeyRingFile' = signingKeyFile
ext.'signing.password' = System.getenv('GPG_PASSWORD')
ext.'ossrhUsername' = System.getenv('OSSRH_USERNAME')
ext.'ossrhPassword' = System.getenv('OSSRH_PASSWORD')

dependencies {
    compileOnly 'org.jooq:jooq:3.12.3'
    compileOnly 'org.jooq:jooq-meta:3.12.3'
    compileOnly 'org.liquibase:liquibase-core:3.8.1'

    liquibaseRuntime 'org.liquibase:liquibase-core:3.8.1'
    liquibaseRuntime 'org.postgresql:postgresql:42.2.9'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

def generatedResources = "$buildDir/generated/jooq"
sourceSets.main.java.srcDirs += generatedResources

task generateJOOQ {
    outputs.dir generatedResources
    doLast {
        GenerationTool.generate(file("$buildDir/resources/main/jooq/motometer.xml").text)
    }
}

compileJava.dependsOn generateJOOQ
generateJOOQ.dependsOn processResources
generateJOOQ.dependsOn update

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/liquibase/changelog.xml'
            url jdbcUrl
            username jdbcUsername
            password jdbcPassword
            liquibaseSchemaName schema
            defaultSchemaName schema
        }
    }
}

processResources {
    expand project.properties
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll {
            it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar'
        }.each { task ->
            task.enabled = false
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name = 'Telegram Bot database'
                packaging 'jar'
                description 'Telegram Bot database'
                url = 'https://github.com/motometer/telegram-bot-database'

                scm {
                    connection = 'scm:git:https://github.com/motometer/telegram-bot-database.git'
                    developerConnection = 'scm:git:https://github.com/motometer/telegram-bot-database.git'
                    url = 'https://github.com/motometer/telegram-bot-database'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'vbychkovskyi'
                        name = 'Viacheslav Bychkovskyi'
                        email = 'vbychkovskyy@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

uploadArchives.dependsOn signArchives

task downloadKey {
    outputs.file("$signingKeyFile")
    doLast {
        def file = new File("$signingKeyFile")
        def keyLocation = System.getenv('GPG_KEY_LOCATION')
        if (!file.exists() && keyLocation != null) {
            new URL(keyLocation)
                    .withInputStream { stream -> file.withOutputStream{ it << stream }}
        }
    }
}

signArchives.dependsOn downloadKey
